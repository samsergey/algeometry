-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/algeometry#readme</a>
@package algeometry
@version 0.1.0.0


module Algeometry.GeometricAlgebra

-- | The class representing a general linear space with basis of type
--   <tt>b</tt> and element (vector) of type <tt>el</tt>.
class Eq b => LinSpace b el | el -> b

-- | The zero element.
zero :: LinSpace b el => el

-- | Predicate for the zero element.
isZero :: LinSpace b el => el -> Bool

-- | Constructor for the monom.
monom :: LinSpace b el => b -> Double -> el

-- | Predicate for the monom.
isMonom :: LinSpace b el => el -> Bool

-- | Addition for two elements.
add :: LinSpace b el => el -> el -> el

-- | Mapping of partial unary linear function through an element.
lmap :: LinSpace b el => (b -> Maybe (b, Double)) -> el -> el

-- | Distribution of partial binary linear function through two elements.
lapp :: LinSpace b el => (b -> b -> Maybe (b, Double)) -> el -> el -> el

-- | Extraction of elements with given predicate.
lfilter :: LinSpace b el => (b -> Double -> Bool) -> el -> el

-- | Scalar coefficient of an element
coeff :: LinSpace b el => b -> el -> Double

-- | Representation of an element as assoclist.
assoc :: LinSpace b el => el -> [(b, Double)]

-- | The class representing Clifford algebra with generators of type
--   <tt>g</tt> and element (multivector) of type <tt>mv</tt>.
class (Eq mv, Ord g, LinSpace [g] mv) => CliffAlgebra g mv

-- | The signature of Clifford algebra. The first argument is proxy needed
--   to resolve the functional dependence for class instance.
algebraSignature :: CliffAlgebra g mv => mv -> (Int, Int, Int)

-- | Squares of the generators, which define the Clifford algebra. The
--   first argument is proxy needed to resolve the functional dependence
--   for class instance.
square :: CliffAlgebra g mv => mv -> g -> Double

-- | List of generators of the Clifford algebra.
generators :: CliffAlgebra g mv => [mv]

-- | Returns the grade of a multivector.
grade :: CliffAlgebra g mv => mv -> Int

-- | The geometric product.
geom :: CliffAlgebra g mv => mv -> mv -> mv

-- | The outer product (same as <a>(∧)</a>).
outer :: CliffAlgebra g mv => mv -> mv -> mv

-- | The right contraction (same as <a>(|-)</a>).
rcontract :: CliffAlgebra g mv => mv -> mv -> mv

-- | The left contraction (same as <a>(-|)</a>).
lcontract :: CliffAlgebra g mv => mv -> mv -> mv

-- | The inner product (same as <tt>(·)</tt>).
inner :: CliffAlgebra g mv => mv -> mv -> mv

-- | The reverse of a multivector.
rev :: CliffAlgebra g mv => mv -> mv

-- | The inversion of a multivector.
inv :: CliffAlgebra g mv => mv -> mv

-- | The conjugate of a multivector
conj :: CliffAlgebra g mv => mv -> mv

-- | The dual of a multivector.
dual :: CliffAlgebra g mv => mv -> mv

-- | The right complement of a multivector.
rcompl :: CliffAlgebra g mv => mv -> mv

-- | The left complement of a multivector.
lcompl :: CliffAlgebra g mv => mv -> mv

-- | The class representing Clifford algebra that have geometric
--   representation.
class CliffAlgebra g mv => GeomAlgebra g mv

-- | Representation of a point, given as coordinate list, as a k-vector.
point :: GeomAlgebra g mv => [Double] -> mv

-- | Representation of a k-vector as a point, given as coordinate list.
coord :: GeomAlgebra g mv => mv -> [Double]

-- | Returns a geometric dimention for the embedding space of the algebra.
--   The multivector is used as a type witness.
spaceDim :: GeomAlgebra g mv => mv -> Int

-- | Returns a geometric dimention for a multivector. It does not alwais
--   correspond to grade, and depends on the dimension of the embedding
--   space for dual algebras.
dim :: GeomAlgebra g mv => mv -> Int

-- | Returns a generator of the algebra.
e :: CliffAlgebra g mv => g -> mv

-- | Returns a monomial element of the algebra (outer product of
--   generators).
e_ :: CliffAlgebra g mv => [g] -> mv

-- | Returns a scalar element of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; scalar (sin 1) + scalar (cos 1) * e12 :: VGA 2
--   0.8414709848078965 + 0.5403023058681398e₁₂
--   </pre>
scalar :: CliffAlgebra g mv => Double -> mv

-- | Returns a k-vector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; kvec 1 [1,2,3] :: VGA 2
--   e₁ + 2.0e₂ + 3.0e₃
--   
--   &gt;&gt;&gt; kvec 2 [1,2,3] :: VGA 3
--   e₁₂ + 2.0e₁₃ + 3.0e₂₃
--   </pre>
kvec :: GeomAlgebra g mv => Int -> [Double] -> mv

-- | Returns a normalized k-vector with given grade and coefficients.
nvec :: GeomAlgebra g mv => Int -> [Double] -> mv

-- | Returns a normalized k-antivector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; avec 1 [1,2,3] :: VGA 3
--   3.0e₁₂ + 2.0e₁₃ + e₂₃
--   
--   &gt;&gt;&gt; avec 2 [1,2,3] :: VGA 3
--   3.0e₁ + 2.0e₂ + e₃
--   </pre>
avec :: GeomAlgebra g mv => Int -> [Double] -> mv

-- | Returns an angle between two multivectors.
angle :: GeomAlgebra g mv => mv -> mv -> Double

-- | Returns list of basis elements for an element.
elems :: LinSpace b el => el -> [b]

-- | Returns list of coefficients for an element.
coefs :: LinSpace b el => el -> [Double]

-- | Returns list of monoms for an element.
terms :: LinSpace b el => el -> [el]

-- | Linear interpolation for two elements, parameterized for interval
--   [0,1].
lerp :: (Num el, LinSpace b el) => el -> el -> Double -> el

-- | Returns <tt>True</tt> if multivector is scalar and <tt>False</tt>
--   otherwise.
isScalar :: CliffAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is a k-vector and <tt>False</tt>
--   otherwise..
isHomogeneous :: CliffAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is singular (non-invertible) and
--   <tt>False</tt> otherwise.
isSingular :: (Num mv, CliffAlgebra g mv) => mv -> Bool

-- | Extracts a scalar part from a multivector.
trace :: CliffAlgebra g mv => mv -> Double

-- | Extracts k-blade from a multivector.
getGrade :: CliffAlgebra g mv => Int -> mv -> mv

-- | Returns a list of monomial components in the multivector.
components :: CliffAlgebra g mv => mv -> [mv]

-- | Returns a pseudoscalar of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; pseudoScalar :: VGA 3
--   e₁₂₃
--   
--   &gt;&gt;&gt; pseudoScalar :: PGA 3
--   e₀₁₂₃
--   </pre>
pseudoScalar :: CliffAlgebra g mv => mv

-- | Returns a list of all monomial components in the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; basis :: [VGA 3]
--   [1.0,e₁,e₂,e₃,e₁₂,e₁₃,e₂₃,e₁₂₃]
--   
--   &gt;&gt;&gt; basis :: [PGA 3]
--   [1.0,e₀,e₁,e₂,e₃,e₀₁,e₀₂,e₀₃,e₁₂,e₁₃,e₂₃,e₀₁₂,e₀₁₃,e₀₂₃,e₁₂₃,e₀₁₂₃]
--   </pre>
basis :: CliffAlgebra g mv => [mv]

-- | Returns <tt>True</tt> if multivector is not singular (invertible) and
--   <tt>False</tt> otherwise.
isInvertible :: CliffAlgebra g mv => mv -> Bool

-- | Returns reciprocal for nonsingular k-vector.
reciprocal :: CliffAlgebra g mv => mv -> mv

-- | Returns an element of a linear space, scaled by given factor.
scale :: LinSpace b el => Double -> el -> el

-- | Extracts vanishing part from a multivector.
weight :: CliffAlgebra g mv => mv -> mv

-- | Extracts non-vanishing part from a multivector.
bulk :: CliffAlgebra g mv => mv -> mv

-- | Returns norm of a multivector.
norm :: CliffAlgebra g mv => mv -> Double

-- | Returns square norm of a multivector.
norm2 :: CliffAlgebra g mv => mv -> Double

-- | Returns normalized multivector for given nonsingular multivector.
normalize :: CliffAlgebra g mv => mv -> mv

-- | The infix operator for the <a>outer</a> product
(∧) :: CliffAlgebra g mv => mv -> mv -> mv
infixr 9 ∧

-- | Regressive product of two multivectors.
(∨) :: GeomAlgebra g mv => mv -> mv -> mv
infixr 9 ∨

-- | The infix operator for <a>rcontract</a>.
(|-) :: CliffAlgebra g mv => mv -> mv -> mv
infix 8 |-

-- | The infix operator for the <a>lcontract</a>.
(-|) :: CliffAlgebra g mv => mv -> mv -> mv
infix 8 -|

-- | The infix operator for the <a>inner</a> product
(∙) :: CliffAlgebra g mv => mv -> mv -> mv
infix 8 ∙

-- | The infix operator for the scalar product
(•) :: CliffAlgebra g mv => mv -> mv -> Double
infix 9 •

-- | Infix operator for projection.
(->|) :: GeomAlgebra g mv => mv -> mv -> mv

-- | Infix operator for antiprojection.
(<-|) :: GeomAlgebra g mv => mv -> mv -> mv

-- | Normalized outer product of two multivectors.
meet :: GeomAlgebra g mv => mv -> mv -> mv

-- | Normalized regressive product of two multivectors.
join :: GeomAlgebra g mv => mv -> mv -> mv

-- | Returns intersection of an object and a segment.
segmentMeet :: GeomAlgebra g mv => mv -> (mv, mv) -> Maybe mv

-- | For polygon and a line returns list of intersection points.
clipPoly :: GeomAlgebra g mv => [mv] -> mv -> [mv]

-- | Returns reflection of object <tt>a</tt> against object <tt>b</tt>.
reflectAt :: (Num mv, GeomAlgebra g mv) => mv -> mv -> mv

-- | Rotates object <tt>x</tt> against the object <tt>p</tt> by given
--   angle.
rotateAt :: (Num mv, GeomAlgebra g mv) => mv -> Double -> mv -> mv

-- | Returns projection of object <tt>a</tt> on object <tt>b</tt>.
projectOn :: GeomAlgebra g mv => mv -> mv -> mv

-- | Returns antiprojection of object <tt>a</tt> on object <tt>b</tt>.
antiprojectTo :: GeomAlgebra g mv => mv -> mv -> mv

-- | Translates an object along the object <tt>l</tt> by distance, given by
--   norm of <tt>l</tt>.
shiftAlong :: (GeomAlgebra g mv, Fractional mv) => mv -> mv -> mv

-- | Translates object <tt>x</tt> along the object <tt>l</tt> by given
--   distance <tt>d</tt>.
shiftAlong' :: (GeomAlgebra g mv, Fractional mv) => mv -> Double -> mv -> mv

-- | Rescales an object <tt>a</tt> by given value.
rescale :: (Num mv, CliffAlgebra g mv) => Double -> mv -> mv

-- | Rescales magnitude of object <tt>a</tt> by given value.
stretch :: (Num mv, CliffAlgebra g mv) => Double -> mv -> mv

-- | Returns <tt>True</tt> if k-vector represents a point.
isPoint :: GeomAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a line.
isLine :: GeomAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a plane.
isPlane :: GeomAlgebra g mv => mv -> Bool
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Double GHC.Types.Double
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Double] GHC.Types.Double


module Algeometry.Types
newtype Pos a (p :: Nat)
Pos :: a -> Pos a (p :: Nat)
newtype Neg a (r :: Nat)
Neg :: a -> Neg a (r :: Nat)
newtype Zero a (q :: Nat)
Zero :: a -> Zero a (q :: Nat)
newtype CA (p :: Nat) (q :: Nat) (r :: Nat)
CA :: Pos (Zero (Neg MapLS r) q) p -> CA (p :: Nat) (q :: Nat) (r :: Nat)

-- | Wrapper which represents dual algebra for a given one.
newtype Dual a
Dual :: a -> Dual a
[getDual] :: Dual a -> a

-- | Outer (Grassmann) algebra of given dimension.
newtype Outer (n :: Nat)
Outer :: MapLS -> Outer (n :: Nat)

-- | Dual outer (Grassmann) algebra of given dimension.
type Outer' n = Dual (Outer n)

-- | Affine vector geometric algebra of given dimension.
newtype VGA (n :: Nat)
VGA :: CA n 0 0 -> VGA (n :: Nat)

-- | Dual affine vector geometric algebra of given dimension.
type VGA' n = Dual (VGA n)

-- | Projective geometric algebra of given dimension.
newtype PGA (n :: Nat)
PGA :: CA n 1 0 -> PGA (n :: Nat)

-- | Dual projective geometric algebra of given dimension.
type PGA' n = Dual (PGA n)
data GeometricNum a
class Tabulated e a | a -> e
squareT :: Tabulated e a => a -> e -> Double
signatureT :: Tabulated e a => a -> (Int, Int, Int)
generatorsT :: Tabulated e a => [a]
indexT :: Tabulated e a => IndexMap [e] a
geomT :: Tabulated e a => Table e a (Int, Int)
outerT :: Tabulated e a => Table e a (Int, Int)
innerT :: Tabulated e a => Table e a (Int, Int)
lcontractT :: Tabulated e a => Table e a (Int, Int)
rcontractT :: Tabulated e a => Table e a (Int, Int)
revT :: Tabulated e a => Table e a Int
invT :: Tabulated e a => Table e a Int
conjT :: Tabulated e a => Table e a Int
dualT :: Tabulated e a => Table e a Int
rcomplT :: Tabulated e a => Table e a Int
lcomplT :: Tabulated e a => Table e a Int
newtype TabulatedGA a
TabulatedGA :: a -> TabulatedGA a

-- | Representation of linear space as a map, indexed by integer indexes.
type MapLS = Map [Int] Double

-- | Template which generates aliases for given basis of Clifford algebra.
defineElements :: CliffAlgebra Int a => [a] -> Q [Dec]

-- | Template which generates instanses for tabulated geometric algebra.
tabulateGA :: String -> Integer -> String -> Q Decs
instance GHC.TypeNats.KnownNat n => GHC.Float.Floating (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Real.Fractional (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Classes.Eq (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Num.Num (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Float.Floating (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Real.Fractional (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Classes.Eq (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Num.Num (Algeometry.Types.VGA n)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Algeometry.Types.TabulatedGA a)
instance Algeometry.GeometricAlgebra.LinSpace e a => Algeometry.GeometricAlgebra.LinSpace e (Algeometry.Types.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra b a => Algeometry.GeometricAlgebra.CliffAlgebra b (Algeometry.Types.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra e a => GHC.Classes.Eq (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra e a => GHC.Num.Num (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int a => GHC.Real.Fractional (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int a => GHC.Float.Floating (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int a => GHC.Show.Show (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] a => Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int a => Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Classes.Eq (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Show.Show (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Num.Num (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Real.Fractional (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Float.Floating (Algeometry.Types.Outer n)
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Show.Show (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int (Algeometry.Types.VGA n)
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Show.Show (Algeometry.Types.PGA n)
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Classes.Eq (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Show.Show (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Num.Num (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Real.Fractional (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Float.Floating (Algeometry.Types.CA p q r)
instance Algeometry.GeometricAlgebra.LinSpace e a => Algeometry.GeometricAlgebra.LinSpace e (Algeometry.Types.TabulatedGA a)
instance (Algeometry.GeometricAlgebra.CliffAlgebra e a, Algeometry.Types.Tabulated e a) => Algeometry.GeometricAlgebra.CliffAlgebra e (Algeometry.Types.TabulatedGA a)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int (Algeometry.Types.PGA n)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int (Algeometry.Types.CA p r q)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int (Algeometry.Types.Outer n)
instance Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int a => Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra b a => GHC.Classes.Eq (Algeometry.Types.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra b a => GHC.Num.Num (Algeometry.Types.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra b a => GHC.Real.Fractional (Algeometry.Types.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int a => GHC.Show.Show (Algeometry.Types.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int a => GHC.Float.Floating (Algeometry.Types.GeometricNum a)
instance GHC.Classes.Ord e => Algeometry.GeometricAlgebra.LinSpace e (Data.Map.Internal.Map e GHC.Types.Double)


module Algeometry

-- | The class representing a general linear space with basis of type
--   <tt>b</tt> and element (vector) of type <tt>el</tt>.
class Eq b => LinSpace b el | el -> b

-- | The zero element.
zero :: LinSpace b el => el

-- | Predicate for the zero element.
isZero :: LinSpace b el => el -> Bool

-- | Constructor for the monom.
monom :: LinSpace b el => b -> Double -> el

-- | Predicate for the monom.
isMonom :: LinSpace b el => el -> Bool

-- | Addition for two elements.
add :: LinSpace b el => el -> el -> el

-- | Mapping of partial unary linear function through an element.
lmap :: LinSpace b el => (b -> Maybe (b, Double)) -> el -> el

-- | Distribution of partial binary linear function through two elements.
lapp :: LinSpace b el => (b -> b -> Maybe (b, Double)) -> el -> el -> el

-- | Extraction of elements with given predicate.
lfilter :: LinSpace b el => (b -> Double -> Bool) -> el -> el

-- | Scalar coefficient of an element
coeff :: LinSpace b el => b -> el -> Double

-- | Representation of an element as assoclist.
assoc :: LinSpace b el => el -> [(b, Double)]

-- | Returns an element of a linear space, scaled by given factor.
scale :: LinSpace b el => Double -> el -> el

-- | Returns list of basis elements for an element.
elems :: LinSpace b el => el -> [b]

-- | Returns list of coefficients for an element.
coefs :: LinSpace b el => el -> [Double]

-- | Returns list of monoms for an element.
terms :: LinSpace b el => el -> [el]

-- | Linear interpolation for two elements, parameterized for interval
--   [0,1].
lerp :: (Num el, LinSpace b el) => el -> el -> Double -> el

-- | The class representing Clifford algebra with generators of type
--   <tt>g</tt> and element (multivector) of type <tt>mv</tt>.
class (Eq mv, Ord g, LinSpace [g] mv) => CliffAlgebra g mv

-- | The signature of Clifford algebra. The first argument is proxy needed
--   to resolve the functional dependence for class instance.
algebraSignature :: CliffAlgebra g mv => mv -> (Int, Int, Int)

-- | Squares of the generators, which define the Clifford algebra. The
--   first argument is proxy needed to resolve the functional dependence
--   for class instance.
square :: CliffAlgebra g mv => mv -> g -> Double

-- | List of generators of the Clifford algebra.
generators :: CliffAlgebra g mv => [mv]

-- | Returns the grade of a multivector.
grade :: CliffAlgebra g mv => mv -> Int

-- | The geometric product.
geom :: CliffAlgebra g mv => mv -> mv -> mv

-- | The outer product (same as <a>(∧)</a>).
outer :: CliffAlgebra g mv => mv -> mv -> mv

-- | The right contraction (same as <a>(|-)</a>).
rcontract :: CliffAlgebra g mv => mv -> mv -> mv

-- | The left contraction (same as <a>(-|)</a>).
lcontract :: CliffAlgebra g mv => mv -> mv -> mv

-- | The inner product (same as <tt>(·)</tt>).
inner :: CliffAlgebra g mv => mv -> mv -> mv

-- | The reverse of a multivector.
rev :: CliffAlgebra g mv => mv -> mv

-- | The inversion of a multivector.
inv :: CliffAlgebra g mv => mv -> mv

-- | The conjugate of a multivector
conj :: CliffAlgebra g mv => mv -> mv

-- | The dual of a multivector.
dual :: CliffAlgebra g mv => mv -> mv

-- | The right complement of a multivector.
rcompl :: CliffAlgebra g mv => mv -> mv

-- | The left complement of a multivector.
lcompl :: CliffAlgebra g mv => mv -> mv

-- | The infix operator for the <a>outer</a> product
(∧) :: CliffAlgebra g mv => mv -> mv -> mv
infixr 9 ∧

-- | The infix operator for <a>rcontract</a>.
(|-) :: CliffAlgebra g mv => mv -> mv -> mv
infix 8 |-

-- | The infix operator for the <a>lcontract</a>.
(-|) :: CliffAlgebra g mv => mv -> mv -> mv
infix 8 -|

-- | The infix operator for the <a>inner</a> product
(∙) :: CliffAlgebra g mv => mv -> mv -> mv
infix 8 ∙

-- | The infix operator for the scalar product
(•) :: CliffAlgebra g mv => mv -> mv -> Double
infix 9 •

-- | Returns a generator of the algebra.
e :: CliffAlgebra g mv => g -> mv

-- | Returns a monomial element of the algebra (outer product of
--   generators).
e_ :: CliffAlgebra g mv => [g] -> mv

-- | Returns a scalar element of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; scalar (sin 1) + scalar (cos 1) * e12 :: VGA 2
--   0.8414709848078965 + 0.5403023058681398e₁₂
--   </pre>
scalar :: CliffAlgebra g mv => Double -> mv

-- | Returns a k-vector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; kvec 1 [1,2,3] :: VGA 2
--   e₁ + 2.0e₂ + 3.0e₃
--   
--   &gt;&gt;&gt; kvec 2 [1,2,3] :: VGA 3
--   e₁₂ + 2.0e₁₃ + 3.0e₂₃
--   </pre>
kvec :: GeomAlgebra g mv => Int -> [Double] -> mv

-- | Returns a normalized k-antivector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; avec 1 [1,2,3] :: VGA 3
--   3.0e₁₂ + 2.0e₁₃ + e₂₃
--   
--   &gt;&gt;&gt; avec 2 [1,2,3] :: VGA 3
--   3.0e₁ + 2.0e₂ + e₃
--   </pre>
avec :: GeomAlgebra g mv => Int -> [Double] -> mv

-- | Returns a normalized k-vector with given grade and coefficients.
nvec :: GeomAlgebra g mv => Int -> [Double] -> mv

-- | Extracts k-blade from a multivector.
getGrade :: CliffAlgebra g mv => Int -> mv -> mv

-- | Extracts a scalar part from a multivector.
trace :: CliffAlgebra g mv => mv -> Double

-- | Extracts vanishing part from a multivector.
weight :: CliffAlgebra g mv => mv -> mv

-- | Extracts non-vanishing part from a multivector.
bulk :: CliffAlgebra g mv => mv -> mv

-- | Returns a list of monomial components in the multivector.
components :: CliffAlgebra g mv => mv -> [mv]

-- | Returns <tt>True</tt> if multivector is scalar and <tt>False</tt>
--   otherwise.
isScalar :: CliffAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is a k-vector and <tt>False</tt>
--   otherwise..
isHomogeneous :: CliffAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is singular (non-invertible) and
--   <tt>False</tt> otherwise.
isSingular :: (Num mv, CliffAlgebra g mv) => mv -> Bool

-- | Returns norm of a multivector.
norm :: CliffAlgebra g mv => mv -> Double

-- | Returns square norm of a multivector.
norm2 :: CliffAlgebra g mv => mv -> Double

-- | Returns normalized multivector for given nonsingular multivector.
normalize :: CliffAlgebra g mv => mv -> mv

-- | Returns <tt>True</tt> if multivector is not singular (invertible) and
--   <tt>False</tt> otherwise.
isInvertible :: CliffAlgebra g mv => mv -> Bool

-- | Returns reciprocal for nonsingular k-vector.
reciprocal :: CliffAlgebra g mv => mv -> mv

-- | The class representing Clifford algebra that have geometric
--   representation.
class CliffAlgebra g mv => GeomAlgebra g mv

-- | Representation of a point, given as coordinate list, as a k-vector.
point :: GeomAlgebra g mv => [Double] -> mv

-- | Representation of a k-vector as a point, given as coordinate list.
coord :: GeomAlgebra g mv => mv -> [Double]

-- | Returns a geometric dimention for the embedding space of the algebra.
--   The multivector is used as a type witness.
spaceDim :: GeomAlgebra g mv => mv -> Int

-- | Returns a geometric dimention for a multivector. It does not alwais
--   correspond to grade, and depends on the dimension of the embedding
--   space for dual algebras.
dim :: GeomAlgebra g mv => mv -> Int

-- | Returns a pseudoscalar of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; pseudoScalar :: VGA 3
--   e₁₂₃
--   
--   &gt;&gt;&gt; pseudoScalar :: PGA 3
--   e₀₁₂₃
--   </pre>
pseudoScalar :: CliffAlgebra g mv => mv

-- | Returns a list of all monomial components in the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; basis :: [VGA 3]
--   [1.0,e₁,e₂,e₃,e₁₂,e₁₃,e₂₃,e₁₂₃]
--   
--   &gt;&gt;&gt; basis :: [PGA 3]
--   [1.0,e₀,e₁,e₂,e₃,e₀₁,e₀₂,e₀₃,e₁₂,e₁₃,e₂₃,e₀₁₂,e₀₁₃,e₀₂₃,e₁₂₃,e₀₁₂₃]
--   </pre>
basis :: CliffAlgebra g mv => [mv]

-- | Returns <tt>True</tt> if k-vector represents a point.
isPoint :: GeomAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a line.
isLine :: GeomAlgebra g mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a plane.
isPlane :: GeomAlgebra g mv => mv -> Bool

-- | Regressive product of two multivectors.
(∨) :: GeomAlgebra g mv => mv -> mv -> mv
infixr 9 ∨

-- | Normalized outer product of two multivectors.
meet :: GeomAlgebra g mv => mv -> mv -> mv

-- | Normalized regressive product of two multivectors.
join :: GeomAlgebra g mv => mv -> mv -> mv

-- | Returns projection of object <tt>a</tt> on object <tt>b</tt>.
projectOn :: GeomAlgebra g mv => mv -> mv -> mv

-- | Infix operator for projection.
(->|) :: GeomAlgebra g mv => mv -> mv -> mv

-- | Returns antiprojection of object <tt>a</tt> on object <tt>b</tt>.
antiprojectTo :: GeomAlgebra g mv => mv -> mv -> mv

-- | Infix operator for antiprojection.
(<-|) :: GeomAlgebra g mv => mv -> mv -> mv

-- | Returns intersection of an object and a segment.
segmentMeet :: GeomAlgebra g mv => mv -> (mv, mv) -> Maybe mv

-- | Returns reflection of object <tt>a</tt> against object <tt>b</tt>.
reflectAt :: (Num mv, GeomAlgebra g mv) => mv -> mv -> mv

-- | Rotates object <tt>x</tt> against the object <tt>p</tt> by given
--   angle.
rotateAt :: (Num mv, GeomAlgebra g mv) => mv -> Double -> mv -> mv

-- | Returns an angle between two multivectors.
angle :: GeomAlgebra g mv => mv -> mv -> Double

-- | Translates an object along the object <tt>l</tt> by distance, given by
--   norm of <tt>l</tt>.
shiftAlong :: (GeomAlgebra g mv, Fractional mv) => mv -> mv -> mv

-- | Translates object <tt>x</tt> along the object <tt>l</tt> by given
--   distance <tt>d</tt>.
shiftAlong' :: (GeomAlgebra g mv, Fractional mv) => mv -> Double -> mv -> mv

-- | Rescales an object <tt>a</tt> by given value.
rescale :: (Num mv, CliffAlgebra g mv) => Double -> mv -> mv

-- | Rescales magnitude of object <tt>a</tt> by given value.
stretch :: (Num mv, CliffAlgebra g mv) => Double -> mv -> mv

-- | Wrapper which represents dual algebra for a given one.
data Dual a

-- | Type family for Clifford algebras with given signature.
type family Cl (p :: Nat) (q :: Nat) (r :: Nat)

-- | Outer (Grassmann) algebra of given dimension.
newtype Outer (n :: Nat)
Outer :: MapLS -> Outer (n :: Nat)

-- | Dual outer (Grassmann) algebra of given dimension.
type Outer' n = Dual (Outer n)

-- | Affine vector geometric algebra of given dimension.
newtype VGA (n :: Nat)
VGA :: CA n 0 0 -> VGA (n :: Nat)

-- | Dual affine vector geometric algebra of given dimension.
type VGA' n = Dual (VGA n)

-- | Projective geometric algebra of given dimension.
newtype PGA (n :: Nat)
PGA :: CA n 1 0 -> PGA (n :: Nat)

-- | Dual projective geometric algebra of given dimension.
type PGA' n = Dual (PGA n)

-- | Tabulated 2D affine geometric algebra.
newtype VGA2
VGA2 :: MapLS -> VGA2

-- | Tabulated 3D affine geometric algebra.
newtype VGA3
VGA3 :: MapLS -> VGA3

-- | Tabulated 2D projective geometric algebra.
newtype PGA2
PGA2 :: MapLS -> PGA2

-- | Tabulated 3D projective geometric algebra.
newtype PGA3
PGA3 :: MapLS -> PGA3

-- | Tabulated 4D projective geometric algebra.
newtype PGA4
PGA4 :: MapLS -> PGA4

-- | Template which generates aliases for given basis of Clifford algebra.
defineElements :: CliffAlgebra Int a => [a] -> Q [Dec]

-- | Template which generates instanses for tabulated geometric algebra.
tabulateGA :: String -> Integer -> String -> Q Decs
e0 :: CliffAlgebra Int a => a
e1 :: CliffAlgebra Int a => a
e2 :: CliffAlgebra Int a => a
e3 :: CliffAlgebra Int a => a
e4 :: CliffAlgebra Int a => a
e01 :: CliffAlgebra Int a => a
e02 :: CliffAlgebra Int a => a
e03 :: CliffAlgebra Int a => a
e04 :: CliffAlgebra Int a => a
e12 :: CliffAlgebra Int a => a
e13 :: CliffAlgebra Int a => a
e14 :: CliffAlgebra Int a => a
e23 :: CliffAlgebra Int a => a
e24 :: CliffAlgebra Int a => a
e34 :: CliffAlgebra Int a => a
e012 :: CliffAlgebra Int a => a
e013 :: CliffAlgebra Int a => a
e014 :: CliffAlgebra Int a => a
e023 :: CliffAlgebra Int a => a
e024 :: CliffAlgebra Int a => a
e034 :: CliffAlgebra Int a => a
e123 :: CliffAlgebra Int a => a
e124 :: CliffAlgebra Int a => a
e134 :: CliffAlgebra Int a => a
e234 :: CliffAlgebra Int a => a
e1234 :: CliffAlgebra Int a => a
e0234 :: CliffAlgebra Int a => a
e0134 :: CliffAlgebra Int a => a
e0124 :: CliffAlgebra Int a => a
e0123 :: CliffAlgebra Int a => a
e01234 :: CliffAlgebra Int a => a
instance GHC.Classes.Eq Algeometry.PGA4
instance GHC.Num.Num Algeometry.PGA4
instance GHC.Real.Fractional Algeometry.PGA4
instance GHC.Show.Show Algeometry.PGA4
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.PGA4
instance Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int Algeometry.PGA4
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.PGA4
instance Algeometry.Types.Tabulated GHC.Types.Int Algeometry.PGA4
instance GHC.Classes.Eq Algeometry.PGA3
instance GHC.Num.Num Algeometry.PGA3
instance GHC.Real.Fractional Algeometry.PGA3
instance GHC.Show.Show Algeometry.PGA3
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.PGA3
instance Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int Algeometry.PGA3
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.PGA3
instance Algeometry.Types.Tabulated GHC.Types.Int Algeometry.PGA3
instance GHC.Classes.Eq Algeometry.PGA2
instance GHC.Num.Num Algeometry.PGA2
instance GHC.Real.Fractional Algeometry.PGA2
instance GHC.Show.Show Algeometry.PGA2
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.PGA2
instance Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int Algeometry.PGA2
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.PGA2
instance Algeometry.Types.Tabulated GHC.Types.Int Algeometry.PGA2
instance GHC.Classes.Eq Algeometry.VGA3
instance GHC.Num.Num Algeometry.VGA3
instance GHC.Real.Fractional Algeometry.VGA3
instance GHC.Show.Show Algeometry.VGA3
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.VGA3
instance Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int Algeometry.VGA3
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.VGA3
instance Algeometry.Types.Tabulated GHC.Types.Int Algeometry.VGA3
instance GHC.Classes.Eq Algeometry.VGA2
instance GHC.Num.Num Algeometry.VGA2
instance GHC.Real.Fractional Algeometry.VGA2
instance GHC.Show.Show Algeometry.VGA2
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.VGA2
instance Algeometry.GeometricAlgebra.GeomAlgebra GHC.Types.Int Algeometry.VGA2
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.VGA2
instance Algeometry.Types.Tabulated GHC.Types.Int Algeometry.VGA2


module Algeometry.SVG

-- | Represents graphic primitives
data Fig
Point :: [Attribute] -> XY -> Fig
Line :: [Attribute] -> XY -> XY -> Fig
Polygon :: [Attribute] -> [XY] -> Fig

-- | Representation of a figure with many graphic objects with attributes.
data Figure a b

-- | Returns a figure as a list of primitives.
figure :: Figure PGA2 b -> [Fig]

-- | Returns list of graphic objects with attributes.
getFigure :: Figure a b -> [([a], [Attribute])]

-- | Returns value, stored in Figure type.
getResult :: Figure a b -> b

-- | Applies transformation to objects, stored in Figure type.
mapFig :: (a1 -> a2) -> Figure a1 b -> Figure a2 b

-- | Type representing animationa frames.
data Animation a

-- | Adds multivector as graphic object to Figure.
put :: a -> Figure a a

-- | Adds multivector as graphic object with given attributes.
(@) :: a -> [Attribute] -> Figure a a
infix 1 @

-- | Appends attributes to attributed object.
(<@) :: Figure a b -> [Attribute] -> Figure a b
infix 1 <@

-- | Returns raw SVG for a figure.
svg :: Monad m => [Fig] -> HtmlT m ()

-- | Outputs figure to SVG file.
writeSVG :: FilePath -> Figure PGA2 b -> IO ()

-- | Outputs figure to PNG file.
writePNG :: String -> Figure PGA2 b -> IO ()

-- | Outputs single frame of animation, given by a frame number.
writeFrame :: Int -> FilePath -> Animation a -> IO ()

-- | Outputs animation as GIF file, using <tt>convert</tt> utility.
runAnimation :: String -> Animation a -> IO ()

-- | Creates animation from a parameterized function and given nuber of
--   frames.
animate :: Int -> (Double, Double) -> (Double -> Figure PGA2 a) -> Animation ()

-- | Creates animation with nonlinear paremeterization.
transform :: Int -> (Double -> Figure PGA2 a) -> Animation ()

-- | Creates animation from a list of figures.
animateList :: [Figure PGA2 a] -> Animation ()

-- | Returns multivector, which represents the origin.
origin :: GeomAlgebra b a => a

-- | Representation of a point, given as coordinate list, as a k-vector.
point :: GeomAlgebra g mv => [Double] -> mv

-- | Returns multivector, which represents a line.
line :: GeomAlgebra b a => [Double] -> [Double] -> a

-- | Returns multivector, which represents a normalized line.
nline :: GeomAlgebra b a => [Double] -> [Double] -> a

-- | Returns multivector, which represents a vector (line passing through
--   the origin).
vect :: GeomAlgebra b a => [Double] -> a

-- | Returns multivector, which represents a normalized vector (line
--   passing through the origin).
nvect :: GeomAlgebra b a => [Double] -> a

-- | Returns a graphic object, which represents a segment given by
--   coordinates.
segm :: GeomAlgebra b a => [Double] -> [Double] -> Figure a [a]

-- | Returns a graphic object, which represents a polygon.
polygon :: GeomAlgebra e a => [a] -> Figure a [a]

-- | Returns a graphic object, which represents a polyline.
polyline :: GeomAlgebra e a => [a] -> Figure a [a]

-- | Returns a graphic object, which represents a regular polygon.
regularPoly :: GeomAlgebra e a => Double -> Figure a [a]

-- | Returns a graphic object, which represents a segment? given by two
--   points.
segment :: GeomAlgebra e a => a -> a -> Figure a [a]

-- | Returns multivector, which represents a plane passing through three
--   points.
plane :: GeomAlgebra b a => [Double] -> [Double] -> [Double] -> a

-- | Returns graphic object, which represents a plane passing through a
--   point and a line.
plane2 :: (Fractional a, GeomAlgebra e a) => a -> a -> (Double, Double) -> Figure a a

-- | Returns graphic object, which represents a plane passing through three
--   points.
plane3 :: (Fractional a, GeomAlgebra e a) => a -> a -> a -> (Double, Double) -> Figure a a

-- | Returns graphic object, which represents a plane passing through a
--   point, orthogonal to a line.
orthoPlane :: (Fractional a, GeomAlgebra e a) => a -> a -> (Double, Double) -> Figure a a

-- | Returns a label at given position.
label :: GeomAlgebra b a => [Double] -> String -> Figure a a

-- | Returns a label with given value.
display :: (Show s, GeomAlgebra b a) => [Double] -> s -> Figure a a

-- | Projects 3D points to a 2D plane, using given viewpoint.
viewPoint :: [Double] -> Figure PGA3 b -> Figure PGA2 b

-- | Adds 2D axes to a Figure
axis :: Figure PGA2 PGA2

-- | Adds 2D unit grid to a Figure
grid :: Figure PGA2 ()

-- | Adds 2D background rectangle to a Figure
background :: GeomAlgebra e a => String -> Figure a [a]
instance GHC.Classes.Eq Algeometry.SVG.Fig
instance GHC.Show.Show Algeometry.SVG.Fig
instance GHC.Base.Monad (Algeometry.SVG.Figure a)
instance GHC.Base.Applicative (Algeometry.SVG.Figure a)
instance GHC.Base.Functor (Algeometry.SVG.Figure a)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (Algeometry.SVG.Figure a b)
instance GHC.Base.Monad Algeometry.SVG.Animation
instance GHC.Base.Applicative Algeometry.SVG.Animation
instance GHC.Base.Functor Algeometry.SVG.Animation
instance GHC.Show.Show a => GHC.Show.Show (Algeometry.SVG.Animation a)
instance GHC.Classes.Eq a => GHC.Base.Semigroup (Algeometry.SVG.Figure a b)
instance GHC.Classes.Eq a => GHC.Base.Monoid (Algeometry.SVG.Figure a b)
instance Lucid.Base.With (Algeometry.SVG.Figure a b)
instance GHC.Classes.Ord Algeometry.SVG.Fig
instance Lucid.Base.With [Lucid.Base.Attribute]


module Algeometry.Arbitrary

-- | Wrapper for algebra basis elements.
newtype Monom
Monom :: MV -> Monom

-- | Wrapper for 1-vector.
newtype Vector
Vector :: MV -> Vector

-- | Wrapper for 2-vector.
newtype Bivector
Bivector :: MV -> Bivector

-- | Wrapper for 3-vector.
newtype Trivector
Trivector :: MV -> Trivector

-- | Wrapper for a general multivector.
newtype Multivector
Multivector :: MV -> Multivector

-- | Wrapper for a k-vector.
newtype Homogeneous
Homogeneous :: MV -> Homogeneous
instance GHC.Real.Fractional Algeometry.Arbitrary.Monom
instance GHC.Num.Num Algeometry.Arbitrary.Monom
instance GHC.Classes.Eq Algeometry.Arbitrary.Monom
instance GHC.Show.Show Algeometry.Arbitrary.Monom
instance GHC.Real.Fractional Algeometry.Arbitrary.Vector
instance GHC.Num.Num Algeometry.Arbitrary.Vector
instance GHC.Classes.Eq Algeometry.Arbitrary.Vector
instance GHC.Show.Show Algeometry.Arbitrary.Vector
instance GHC.Real.Fractional Algeometry.Arbitrary.Bivector
instance GHC.Num.Num Algeometry.Arbitrary.Bivector
instance GHC.Classes.Eq Algeometry.Arbitrary.Bivector
instance GHC.Show.Show Algeometry.Arbitrary.Bivector
instance GHC.Real.Fractional Algeometry.Arbitrary.Trivector
instance GHC.Num.Num Algeometry.Arbitrary.Trivector
instance GHC.Classes.Eq Algeometry.Arbitrary.Trivector
instance GHC.Show.Show Algeometry.Arbitrary.Trivector
instance GHC.Real.Fractional Algeometry.Arbitrary.Multivector
instance GHC.Num.Num Algeometry.Arbitrary.Multivector
instance GHC.Classes.Eq Algeometry.Arbitrary.Multivector
instance GHC.Show.Show Algeometry.Arbitrary.Multivector
instance GHC.Real.Fractional Algeometry.Arbitrary.Homogeneous
instance GHC.Num.Num Algeometry.Arbitrary.Homogeneous
instance GHC.Classes.Eq Algeometry.Arbitrary.Homogeneous
instance GHC.Show.Show Algeometry.Arbitrary.Homogeneous
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.Arbitrary.Monom
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.Arbitrary.Monom
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.Arbitrary.Vector
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.Arbitrary.Vector
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.Arbitrary.Bivector
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.Arbitrary.Bivector
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.Arbitrary.Trivector
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.Arbitrary.Trivector
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.Arbitrary.Multivector
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.Arbitrary.Multivector
instance Algeometry.GeometricAlgebra.LinSpace [GHC.Types.Int] Algeometry.Arbitrary.Homogeneous
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Int Algeometry.Arbitrary.Homogeneous
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Homogeneous
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Multivector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Trivector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Bivector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Vector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Monom
