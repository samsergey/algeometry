-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/algeometry#readme</a>
@package algeometry
@version 0.1.0.0


module Algeometry.GeometricAlgebra

-- | Type family for basis element of LinearSpace
type family Basis a

-- | Type family for generator of Clifford algebra
type family Generator a

-- | The class representing a general linear space.
class Eq (Basis el) => LinSpace el

-- | The zero element.
zero :: LinSpace el => el

-- | Predicate for the zero element.
isZero :: LinSpace el => el -> Bool

-- | Constructor for the monom.
monom :: LinSpace el => Basis el -> Double -> el

-- | Predicate for the monom.
isMonom :: LinSpace el => el -> Bool

-- | Addition for two elements.
add :: LinSpace el => el -> el -> el

-- | Mapping of partial unary linear function through an element.
lmap :: LinSpace el => (Basis el -> Maybe (Basis el, Double)) -> el -> el

-- | Distribution of partial binary linear function through two elements.
lapp :: LinSpace el => (Basis el -> Basis el -> Maybe (Basis el, Double)) -> el -> el -> el

-- | Extraction of elements with given predicate.
lfilter :: LinSpace el => (Basis el -> Double -> Bool) -> el -> el

-- | Scalar coefficient of an element
coeff :: LinSpace el => Basis el -> el -> Double

-- | Representation of an element as assoclist.
assoc :: LinSpace el => el -> [(Basis el, Double)]

-- | The class representing Clifford algebra.
class (Ord (Generator mv), Basis mv ~ [Generator mv], LinSpace mv, Eq mv) => CliffAlgebra mv

-- | The signature of Clifford algebra. The first argument is proxy needed
--   to specify the class.
algebraSignature :: CliffAlgebra mv => mv -> (Int, Int, Int)

-- | Squares of the generators, which define the Clifford algebra. The
--   first argument is proxy needed to resolve the dependence for
--   <a>Generator</a> type instance.
square :: CliffAlgebra mv => mv -> Generator mv -> Double

-- | List of generators of the Clifford algebra.
generators :: CliffAlgebra mv => [mv]

-- | Returns the grade of a multivector.
grade :: CliffAlgebra mv => mv -> Int

-- | The geometric product.
geom :: CliffAlgebra mv => mv -> mv -> mv

-- | The outer product (same as <a>(∧)</a>).
outer :: CliffAlgebra mv => mv -> mv -> mv

-- | The right contraction (same as <a>(|-)</a>).
rcontract :: CliffAlgebra mv => mv -> mv -> mv

-- | The left contraction (same as <a>(-|)</a>).
lcontract :: CliffAlgebra mv => mv -> mv -> mv

-- | The inner product (same as <tt>(·)</tt>).
inner :: CliffAlgebra mv => mv -> mv -> mv

-- | The reverse of a multivector.
rev :: CliffAlgebra mv => mv -> mv

-- | The inversion of a multivector.
inv :: CliffAlgebra mv => mv -> mv

-- | The conjugate of a multivector
conj :: CliffAlgebra mv => mv -> mv

-- | The dual of a multivector.
dual :: CliffAlgebra mv => mv -> mv

-- | The right complement of a multivector.
rcompl :: CliffAlgebra mv => mv -> mv

-- | The left complement of a multivector.
lcompl :: CliffAlgebra mv => mv -> mv

-- | Separates scalar and non-scalar part of a multivector.
decompose :: CliffAlgebra mv => mv -> (Double, mv)

-- | Extracts a scalar part from a multivector.
trace :: CliffAlgebra mv => mv -> Double

-- | Extracts a non-scalar part from a multivector.
nonScalar :: CliffAlgebra mv => mv -> mv

-- | The class representing Clifford algebra that have geometric
--   representation.
class CliffAlgebra mv => GeomAlgebra mv

-- | Representation of a point, given as coordinate list, as a k-vector.
point :: GeomAlgebra mv => [Double] -> mv

-- | Representation of a k-vector as a point, given as coordinate list.
coord :: GeomAlgebra mv => mv -> [Double]

-- | Returns a geometric dimension for the embedding space of the algebra.
--   The multivector is used as a type witness.
spaceDim :: GeomAlgebra mv => mv -> Int

-- | Returns a geometric dimension for a multivector. It does not alwais
--   correspond to grade, and depends on the dimension of the embedding
--   space for dual algebras.
dim :: GeomAlgebra mv => mv -> Int

-- | Returns a generator of the algebra.
e :: CliffAlgebra mv => Generator mv -> mv

-- | Returns a monomial element of the algebra (outer product of
--   generators).
e_ :: CliffAlgebra mv => [Generator mv] -> mv

-- | Returns a scalar element of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; scalar (sin 1) + scalar (cos 1) * e12 :: VGA 2
--   0.8414709848078965 + 0.5403023058681398e₁₂
--   </pre>
scalar :: CliffAlgebra mv => Double -> mv

-- | Returns a k-vector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; kvec 1 [1,2,3] :: VGA 2
--   e₁ + 2.0e₂ + 3.0e₃
--   
--   &gt;&gt;&gt; kvec 2 [1,2,3] :: VGA 3
--   e₁₂ + 2.0e₁₃ + 3.0e₂₃
--   </pre>
kvec :: GeomAlgebra mv => Int -> [Double] -> mv

-- | Returns a normalized k-vector with given grade and coefficients.
nvec :: GeomAlgebra mv => Int -> [Double] -> mv

-- | Returns a normalized k-antivector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; avec 1 [1,2,3] :: VGA 3
--   3.0e₁₂ + 2.0e₁₃ + e₂₃
--   
--   &gt;&gt;&gt; avec 2 [1,2,3] :: VGA 3
--   3.0e₁ + 2.0e₂ + e₃
--   </pre>
avec :: GeomAlgebra mv => Int -> [Double] -> mv

-- | Returns an angle between two multivectors.
angle :: GeomAlgebra mv => mv -> mv -> Double

-- | Returns list of basis elements for an element.
elems :: LinSpace el => el -> [Basis el]

-- | Returns list of coefficients for an element.
coefs :: LinSpace el => el -> [Double]

-- | Returns list of monoms for an element.
terms :: LinSpace el => el -> [el]

-- | Linear interpolation for two elements, parameterized for interval
--   [0,1].
lerp :: LinSpace el => el -> el -> Double -> el

-- | Returns <tt>True</tt> if multivector is scalar and <tt>False</tt>
--   otherwise.
isScalar :: CliffAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is a k-vector and <tt>False</tt>
--   otherwise..
isHomogeneous :: CliffAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is singular (non-invertible) and
--   <tt>False</tt> otherwise.
isSingular :: CliffAlgebra mv => mv -> Bool

-- | Extracts k-blade from a multivector.
getGrade :: CliffAlgebra mv => Int -> mv -> mv

-- | Returns a list of monomial components in the multivector.
components :: CliffAlgebra mv => mv -> [mv]

-- | Returns a pseudoscalar of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; pseudoScalar :: VGA 3
--   e₁₂₃
--   
--   &gt;&gt;&gt; pseudoScalar :: PGA 3
--   e₀₁₂₃
--   </pre>
pseudoScalar :: CliffAlgebra mv => mv

-- | Returns a list of all monomial components in the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; basis :: [VGA 3]
--   [1.0,e₁,e₂,e₃,e₁₂,e₁₃,e₂₃,e₁₂₃]
--   
--   &gt;&gt;&gt; basis :: [PGA 3]
--   [1.0,e₀,e₁,e₂,e₃,e₀₁,e₀₂,e₀₃,e₁₂,e₁₃,e₂₃,e₀₁₂,e₀₁₃,e₀₂₃,e₁₂₃,e₀₁₂₃]
--   </pre>
basis :: CliffAlgebra mv => [mv]

-- | Returns <tt>True</tt> if multivector is not singular (invertible) and
--   <tt>False</tt> otherwise.
isInvertible :: CliffAlgebra mv => mv -> Bool

-- | Returns reciprocal for nonsingular k-vector.
reciprocal :: CliffAlgebra mv => mv -> mv

-- | Returns <tt>True</tt> if multivector could be expressed as square of
--   another mulivector, and <tt>False</tt> otherwise.
isSquare :: CliffAlgebra mv => mv -> Bool

-- | Returns an element of a linear space, scaled by given factor.
scale :: LinSpace el => Double -> el -> el

-- | Extracts vanishing part from a multivector.
weight :: CliffAlgebra mv => mv -> mv

-- | Extracts non-vanishing part from a multivector.
bulk :: CliffAlgebra mv => mv -> mv

-- | Returns norm of a multivector.
norm :: CliffAlgebra mv => mv -> Double

-- | Returns square norm of a multivector.
norm2 :: CliffAlgebra mv => mv -> Double

-- | Returns normalized multivector for given nonsingular multivector.
normalize :: CliffAlgebra mv => mv -> mv

-- | The infix operator for the <a>outer</a> product
(∧) :: CliffAlgebra mv => mv -> mv -> mv
infixr 9 ∧

-- | Regressive product of two multivectors.
(∨) :: GeomAlgebra mv => mv -> mv -> mv
infixr 9 ∨

-- | The infix operator for <a>rcontract</a>.
(|-) :: CliffAlgebra mv => mv -> mv -> mv
infix 8 |-

-- | The infix operator for the <a>lcontract</a>.
(-|) :: CliffAlgebra mv => mv -> mv -> mv
infix 8 -|

-- | The infix operator for the <a>inner</a> product
(∙) :: CliffAlgebra mv => mv -> mv -> mv
infix 8 ∙

-- | The infix operator for the scalar product
(•) :: CliffAlgebra mv => mv -> mv -> Double
infix 9 •

-- | Infix operator for projection.
(->|) :: GeomAlgebra mv => mv -> mv -> mv

-- | Infix operator for antiprojection.
(<-|) :: GeomAlgebra mv => mv -> mv -> mv

-- | Normalized outer product of two multivectors.
meet :: GeomAlgebra mv => mv -> mv -> mv

-- | Normalized regressive product of two multivectors.
join :: GeomAlgebra mv => mv -> mv -> mv

-- | Returns intersection of an object and a segment.
segmentMeet :: GeomAlgebra mv => mv -> (mv, mv) -> Maybe mv

-- | For polygon and a line returns list of intersection points.
clipPoly :: GeomAlgebra mv => [mv] -> mv -> [mv]

-- | Returns reflection of object <tt>a</tt> against object <tt>b</tt>.
reflectAt :: GeomAlgebra mv => mv -> mv -> mv

-- | Rotates object <tt>x</tt> against the object <tt>p</tt> by given
--   angle.
rotateAt :: GeomAlgebra mv => mv -> Double -> mv -> mv

-- | Returns projection of object <tt>a</tt> on object <tt>b</tt>.
projectOn :: GeomAlgebra mv => mv -> mv -> mv

-- | Returns antiprojection of object <tt>a</tt> on object <tt>b</tt>.
antiprojectTo :: GeomAlgebra mv => mv -> mv -> mv

-- | Translates an object along the object <tt>l</tt> by distance, given by
--   norm of <tt>l</tt>.
shiftAlong :: GeomAlgebra mv => mv -> mv -> mv

-- | Translates object <tt>x</tt> along the object <tt>l</tt> by given
--   distance <tt>d</tt>.
shiftAlong' :: GeomAlgebra mv => mv -> Double -> mv -> mv

-- | Rescales an object <tt>a</tt> by given value.
rescale :: CliffAlgebra mv => Double -> mv -> mv

-- | Rescales magnitude of object <tt>a</tt> by given value.
stretch :: CliffAlgebra mv => Double -> mv -> mv

-- | Returns <tt>True</tt> if k-vector represents a point.
isPoint :: GeomAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a line.
isLine :: GeomAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a plane.
isPlane :: GeomAlgebra mv => mv -> Bool
instance Algeometry.GeometricAlgebra.CliffAlgebra GHC.Types.Double
instance Algeometry.GeometricAlgebra.LinSpace GHC.Types.Double


module Algeometry.GeometricNum

-- | This newtype implements various classes for arbitrary Clifford
--   algebra. It may be used to derive numeric classes for exact Geometric
--   algebra implementation using <tt>deriving via</tt> mechanics.
newtype GeometricNum a
GeometricNum :: a -> GeometricNum a
instance Algeometry.GeometricAlgebra.LinSpace a => Algeometry.GeometricAlgebra.LinSpace (Algeometry.GeometricNum.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => Algeometry.GeometricAlgebra.CliffAlgebra (Algeometry.GeometricNum.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => GHC.Classes.Eq (Algeometry.GeometricNum.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => GHC.Num.Num (Algeometry.GeometricNum.GeometricNum a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => GHC.Real.Fractional (Algeometry.GeometricNum.GeometricNum a)
instance (Algeometry.GeometricAlgebra.Generator a GHC.Types.~ GHC.Types.Int, Algeometry.GeometricAlgebra.CliffAlgebra a) => GHC.Show.Show (Algeometry.GeometricNum.GeometricNum a)
instance (Algeometry.GeometricAlgebra.Generator a GHC.Types.~ GHC.Types.Int, Algeometry.GeometricAlgebra.CliffAlgebra a) => GHC.Float.Floating (Algeometry.GeometricNum.GeometricNum a)


module Algeometry.Types
newtype CA (p :: Nat) (q :: Nat) (r :: Nat)
CA :: MapLS -> CA (p :: Nat) (q :: Nat) (r :: Nat)

-- | Wrapper which represents dual algebra for a given one.
newtype Dual a
Dual :: a -> Dual a
[getDual] :: Dual a -> a

-- | Outer (Grassmann) algebra of given dimension.
newtype Outer (n :: Nat)
Outer :: MapLS -> Outer (n :: Nat)

-- | Dual outer (Grassmann) algebra of given dimension.
type Outer' n = Dual (Outer n)

-- | Affine vector geometric algebra of given dimension.
newtype VGA (n :: Nat)
VGA :: CA n 0 0 -> VGA (n :: Nat)

-- | Dual affine vector geometric algebra of given dimension.
type VGA' n = Dual (VGA n)

-- | Projective geometric algebra of given dimension.
newtype PGA (n :: Nat)
PGA :: CA n 1 0 -> PGA (n :: Nat)

-- | Dual projective geometric algebra of given dimension.
type PGA' n = Dual (PGA n)
class CliffAlgebra a => Tabulated a
squareT :: Tabulated a => a -> Generator a -> Double
signatureT :: Tabulated a => a -> (Int, Int, Int)
generatorsT :: Tabulated a => [a]
indexT :: Tabulated a => IndexMap a
geomT :: Tabulated a => Table a (Int, Int)
outerT :: Tabulated a => Table a (Int, Int)
innerT :: Tabulated a => Table a (Int, Int)
lcontractT :: Tabulated a => Table a (Int, Int)
rcontractT :: Tabulated a => Table a (Int, Int)
revT :: Tabulated a => Table a Int
invT :: Tabulated a => Table a Int
conjT :: Tabulated a => Table a Int
dualT :: Tabulated a => Table a Int
rcomplT :: Tabulated a => Table a Int
lcomplT :: Tabulated a => Table a Int
newtype TabulatedGA a
TabulatedGA :: a -> TabulatedGA a

-- | Representation of linear space as a map, indexed by integer indexes.
type MapLS = Map [Int] Double

-- | Template which generates aliases for given basis of Clifford algebra.
defineElements :: (Generator a ~ Int, CliffAlgebra a) => [a] -> Q [Dec]

-- | Template which generates instanses for tabulated geometric algebra.
tabulateGA :: String -> Integer -> String -> Q Decs
instance GHC.TypeNats.KnownNat n => GHC.Float.Floating (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Real.Fractional (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Classes.Eq (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Num.Num (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => GHC.Show.Show (Algeometry.Types.Outer n)
instance Algeometry.GeometricAlgebra.LinSpace (Algeometry.Types.Outer n)
instance Algeometry.GeometricAlgebra.LinSpace (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Float.Floating (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Real.Fractional (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Classes.Eq (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Num.Num (Algeometry.Types.CA p q r)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => GHC.Show.Show (Algeometry.Types.CA p q r)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.CliffAlgebra (Algeometry.Types.VGA n)
instance Algeometry.GeometricAlgebra.LinSpace (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Float.Floating (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Real.Fractional (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Classes.Eq (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Num.Num (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => GHC.Show.Show (Algeometry.Types.VGA n)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.CliffAlgebra (Algeometry.Types.PGA n)
instance Algeometry.GeometricAlgebra.LinSpace (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Float.Floating (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Real.Fractional (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Classes.Eq (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Num.Num (Algeometry.Types.PGA n)
instance GHC.TypeNats.KnownNat n => GHC.Show.Show (Algeometry.Types.PGA n)
instance Algeometry.GeometricAlgebra.LinSpace a => Algeometry.GeometricAlgebra.LinSpace (Algeometry.Types.TabulatedGA a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Algeometry.Types.TabulatedGA a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => GHC.Classes.Eq (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => GHC.Num.Num (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => GHC.Real.Fractional (Algeometry.Types.Dual a)
instance (Algeometry.GeometricAlgebra.Generator a GHC.Types.~ GHC.Types.Int, Algeometry.GeometricAlgebra.CliffAlgebra a) => GHC.Float.Floating (Algeometry.Types.Dual a)
instance (Algeometry.GeometricAlgebra.Generator a GHC.Types.~ GHC.Types.Int, Algeometry.GeometricAlgebra.CliffAlgebra a) => GHC.Show.Show (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.LinSpace a => Algeometry.GeometricAlgebra.LinSpace (Algeometry.Types.Dual a)
instance Algeometry.GeometricAlgebra.CliffAlgebra a => Algeometry.GeometricAlgebra.CliffAlgebra (Algeometry.Types.Dual a)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.GeomAlgebra (Algeometry.Types.VGA n)
instance (Algeometry.GeometricAlgebra.CliffAlgebra a, Algeometry.Types.Tabulated a) => Algeometry.GeometricAlgebra.CliffAlgebra (Algeometry.Types.TabulatedGA a)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.GeomAlgebra (Algeometry.Types.PGA n)
instance (GHC.TypeNats.KnownNat p, GHC.TypeNats.KnownNat q, GHC.TypeNats.KnownNat r) => Algeometry.GeometricAlgebra.CliffAlgebra (Algeometry.Types.CA p q r)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.CliffAlgebra (Algeometry.Types.Outer n)
instance GHC.TypeNats.KnownNat n => Algeometry.GeometricAlgebra.GeomAlgebra (Algeometry.Types.Outer n)
instance Algeometry.GeometricAlgebra.GeomAlgebra a => Algeometry.GeometricAlgebra.GeomAlgebra (Algeometry.Types.Dual a)
instance GHC.Classes.Ord e => Algeometry.GeometricAlgebra.LinSpace (Data.Map.Internal.Map e GHC.Types.Double)


module Algeometry

-- | The class representing a general linear space.
class Eq (Basis el) => LinSpace el

-- | The zero element.
zero :: LinSpace el => el

-- | Predicate for the zero element.
isZero :: LinSpace el => el -> Bool

-- | Constructor for the monom.
monom :: LinSpace el => Basis el -> Double -> el

-- | Predicate for the monom.
isMonom :: LinSpace el => el -> Bool

-- | Addition for two elements.
add :: LinSpace el => el -> el -> el

-- | Mapping of partial unary linear function through an element.
lmap :: LinSpace el => (Basis el -> Maybe (Basis el, Double)) -> el -> el

-- | Distribution of partial binary linear function through two elements.
lapp :: LinSpace el => (Basis el -> Basis el -> Maybe (Basis el, Double)) -> el -> el -> el

-- | Extraction of elements with given predicate.
lfilter :: LinSpace el => (Basis el -> Double -> Bool) -> el -> el

-- | Scalar coefficient of an element
coeff :: LinSpace el => Basis el -> el -> Double

-- | Representation of an element as assoclist.
assoc :: LinSpace el => el -> [(Basis el, Double)]

-- | Type family for basis element of LinearSpace
type family Basis a

-- | Returns an element of a linear space, scaled by given factor.
scale :: LinSpace el => Double -> el -> el

-- | Returns list of basis elements for an element.
elems :: LinSpace el => el -> [Basis el]

-- | Returns list of coefficients for an element.
coefs :: LinSpace el => el -> [Double]

-- | Returns list of monoms for an element.
terms :: LinSpace el => el -> [el]

-- | Linear interpolation for two elements, parameterized for interval
--   [0,1].
lerp :: LinSpace el => el -> el -> Double -> el

-- | The class representing Clifford algebra.
class (Ord (Generator mv), Basis mv ~ [Generator mv], LinSpace mv, Eq mv) => CliffAlgebra mv

-- | The signature of Clifford algebra. The first argument is proxy needed
--   to specify the class.
algebraSignature :: CliffAlgebra mv => mv -> (Int, Int, Int)

-- | Squares of the generators, which define the Clifford algebra. The
--   first argument is proxy needed to resolve the dependence for
--   <a>Generator</a> type instance.
square :: CliffAlgebra mv => mv -> Generator mv -> Double

-- | List of generators of the Clifford algebra.
generators :: CliffAlgebra mv => [mv]

-- | Returns the grade of a multivector.
grade :: CliffAlgebra mv => mv -> Int

-- | The geometric product.
geom :: CliffAlgebra mv => mv -> mv -> mv

-- | The outer product (same as <a>(∧)</a>).
outer :: CliffAlgebra mv => mv -> mv -> mv

-- | The right contraction (same as <a>(|-)</a>).
rcontract :: CliffAlgebra mv => mv -> mv -> mv

-- | The left contraction (same as <a>(-|)</a>).
lcontract :: CliffAlgebra mv => mv -> mv -> mv

-- | The inner product (same as <tt>(·)</tt>).
inner :: CliffAlgebra mv => mv -> mv -> mv

-- | The reverse of a multivector.
rev :: CliffAlgebra mv => mv -> mv

-- | The inversion of a multivector.
inv :: CliffAlgebra mv => mv -> mv

-- | The conjugate of a multivector
conj :: CliffAlgebra mv => mv -> mv

-- | The dual of a multivector.
dual :: CliffAlgebra mv => mv -> mv

-- | The right complement of a multivector.
rcompl :: CliffAlgebra mv => mv -> mv

-- | The left complement of a multivector.
lcompl :: CliffAlgebra mv => mv -> mv

-- | Separates scalar and non-scalar part of a multivector.
decompose :: CliffAlgebra mv => mv -> (Double, mv)

-- | Extracts a scalar part from a multivector.
trace :: CliffAlgebra mv => mv -> Double

-- | Extracts a non-scalar part from a multivector.
nonScalar :: CliffAlgebra mv => mv -> mv

-- | Type family for generator of Clifford algebra
type family Generator a

-- | The infix operator for the <a>outer</a> product
(∧) :: CliffAlgebra mv => mv -> mv -> mv
infixr 9 ∧

-- | The infix operator for <a>rcontract</a>.
(|-) :: CliffAlgebra mv => mv -> mv -> mv
infix 8 |-

-- | The infix operator for the <a>lcontract</a>.
(-|) :: CliffAlgebra mv => mv -> mv -> mv
infix 8 -|

-- | The infix operator for the <a>inner</a> product
(∙) :: CliffAlgebra mv => mv -> mv -> mv
infix 8 ∙

-- | The infix operator for the scalar product
(•) :: CliffAlgebra mv => mv -> mv -> Double
infix 9 •

-- | Returns a generator of the algebra.
e :: CliffAlgebra mv => Generator mv -> mv

-- | Returns a monomial element of the algebra (outer product of
--   generators).
e_ :: CliffAlgebra mv => [Generator mv] -> mv

-- | Returns a scalar element of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; scalar (sin 1) + scalar (cos 1) * e12 :: VGA 2
--   0.8414709848078965 + 0.5403023058681398e₁₂
--   </pre>
scalar :: CliffAlgebra mv => Double -> mv

-- | Returns a k-vector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; kvec 1 [1,2,3] :: VGA 2
--   e₁ + 2.0e₂ + 3.0e₃
--   
--   &gt;&gt;&gt; kvec 2 [1,2,3] :: VGA 3
--   e₁₂ + 2.0e₁₃ + 3.0e₂₃
--   </pre>
kvec :: GeomAlgebra mv => Int -> [Double] -> mv

-- | Returns a normalized k-antivector with given grade and coefficients.
--   
--   <pre>
--   &gt;&gt;&gt; avec 1 [1,2,3] :: VGA 3
--   3.0e₁₂ + 2.0e₁₃ + e₂₃
--   
--   &gt;&gt;&gt; avec 2 [1,2,3] :: VGA 3
--   3.0e₁ + 2.0e₂ + e₃
--   </pre>
avec :: GeomAlgebra mv => Int -> [Double] -> mv

-- | Returns a normalized k-vector with given grade and coefficients.
nvec :: GeomAlgebra mv => Int -> [Double] -> mv

-- | Extracts k-blade from a multivector.
getGrade :: CliffAlgebra mv => Int -> mv -> mv

-- | Extracts vanishing part from a multivector.
weight :: CliffAlgebra mv => mv -> mv

-- | Extracts non-vanishing part from a multivector.
bulk :: CliffAlgebra mv => mv -> mv

-- | Returns a list of monomial components in the multivector.
components :: CliffAlgebra mv => mv -> [mv]

-- | Returns <tt>True</tt> if multivector is scalar and <tt>False</tt>
--   otherwise.
isScalar :: CliffAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is a k-vector and <tt>False</tt>
--   otherwise..
isHomogeneous :: CliffAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if multivector is singular (non-invertible) and
--   <tt>False</tt> otherwise.
isSingular :: CliffAlgebra mv => mv -> Bool

-- | Returns norm of a multivector.
norm :: CliffAlgebra mv => mv -> Double

-- | Returns square norm of a multivector.
norm2 :: CliffAlgebra mv => mv -> Double

-- | Returns normalized multivector for given nonsingular multivector.
normalize :: CliffAlgebra mv => mv -> mv

-- | Returns <tt>True</tt> if multivector is not singular (invertible) and
--   <tt>False</tt> otherwise.
isInvertible :: CliffAlgebra mv => mv -> Bool

-- | Returns reciprocal for nonsingular k-vector.
reciprocal :: CliffAlgebra mv => mv -> mv

-- | The class representing Clifford algebra that have geometric
--   representation.
class CliffAlgebra mv => GeomAlgebra mv

-- | Representation of a point, given as coordinate list, as a k-vector.
point :: GeomAlgebra mv => [Double] -> mv

-- | Representation of a k-vector as a point, given as coordinate list.
coord :: GeomAlgebra mv => mv -> [Double]

-- | Returns a geometric dimension for the embedding space of the algebra.
--   The multivector is used as a type witness.
spaceDim :: GeomAlgebra mv => mv -> Int

-- | Returns a geometric dimension for a multivector. It does not alwais
--   correspond to grade, and depends on the dimension of the embedding
--   space for dual algebras.
dim :: GeomAlgebra mv => mv -> Int

-- | Returns a pseudoscalar of the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; pseudoScalar :: VGA 3
--   e₁₂₃
--   
--   &gt;&gt;&gt; pseudoScalar :: PGA 3
--   e₀₁₂₃
--   </pre>
pseudoScalar :: CliffAlgebra mv => mv

-- | Returns a list of all monomial components in the algebra.
--   
--   <pre>
--   &gt;&gt;&gt; basis :: [VGA 3]
--   [1.0,e₁,e₂,e₃,e₁₂,e₁₃,e₂₃,e₁₂₃]
--   
--   &gt;&gt;&gt; basis :: [PGA 3]
--   [1.0,e₀,e₁,e₂,e₃,e₀₁,e₀₂,e₀₃,e₁₂,e₁₃,e₂₃,e₀₁₂,e₀₁₃,e₀₂₃,e₁₂₃,e₀₁₂₃]
--   </pre>
basis :: CliffAlgebra mv => [mv]

-- | Returns <tt>True</tt> if k-vector represents a point.
isPoint :: GeomAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a line.
isLine :: GeomAlgebra mv => mv -> Bool

-- | Returns <tt>True</tt> if k-vector represents a plane.
isPlane :: GeomAlgebra mv => mv -> Bool

-- | Regressive product of two multivectors.
(∨) :: GeomAlgebra mv => mv -> mv -> mv
infixr 9 ∨

-- | Normalized outer product of two multivectors.
meet :: GeomAlgebra mv => mv -> mv -> mv

-- | Normalized regressive product of two multivectors.
join :: GeomAlgebra mv => mv -> mv -> mv

-- | Returns projection of object <tt>a</tt> on object <tt>b</tt>.
projectOn :: GeomAlgebra mv => mv -> mv -> mv

-- | Infix operator for projection.
(->|) :: GeomAlgebra mv => mv -> mv -> mv

-- | Returns antiprojection of object <tt>a</tt> on object <tt>b</tt>.
antiprojectTo :: GeomAlgebra mv => mv -> mv -> mv

-- | Infix operator for antiprojection.
(<-|) :: GeomAlgebra mv => mv -> mv -> mv

-- | Returns intersection of an object and a segment.
segmentMeet :: GeomAlgebra mv => mv -> (mv, mv) -> Maybe mv

-- | Returns reflection of object <tt>a</tt> against object <tt>b</tt>.
reflectAt :: GeomAlgebra mv => mv -> mv -> mv

-- | Rotates object <tt>x</tt> against the object <tt>p</tt> by given
--   angle.
rotateAt :: GeomAlgebra mv => mv -> Double -> mv -> mv

-- | Returns an angle between two multivectors.
angle :: GeomAlgebra mv => mv -> mv -> Double

-- | Translates an object along the object <tt>l</tt> by distance, given by
--   norm of <tt>l</tt>.
shiftAlong :: GeomAlgebra mv => mv -> mv -> mv

-- | Translates object <tt>x</tt> along the object <tt>l</tt> by given
--   distance <tt>d</tt>.
shiftAlong' :: GeomAlgebra mv => mv -> Double -> mv -> mv

-- | Rescales an object <tt>a</tt> by given value.
rescale :: CliffAlgebra mv => Double -> mv -> mv

-- | Rescales magnitude of object <tt>a</tt> by given value.
stretch :: CliffAlgebra mv => Double -> mv -> mv

-- | Type family for Clifford algebras with given signature.
type family Cl (p :: Nat) (q :: Nat) (r :: Nat)

-- | Wrapper which represents dual algebra for a given one.
data Dual a

-- | Outer (Grassmann) algebra of given dimension.
newtype Outer (n :: Nat)
Outer :: MapLS -> Outer (n :: Nat)

-- | Dual outer (Grassmann) algebra of given dimension.
type Outer' n = Dual (Outer n)

-- | Affine vector geometric algebra of given dimension.
newtype VGA (n :: Nat)
VGA :: CA n 0 0 -> VGA (n :: Nat)

-- | Dual affine vector geometric algebra of given dimension.
type VGA' n = Dual (VGA n)

-- | Projective geometric algebra of given dimension.
newtype PGA (n :: Nat)
PGA :: CA n 1 0 -> PGA (n :: Nat)

-- | Dual projective geometric algebra of given dimension.
type PGA' n = Dual (PGA n)

-- | Tabulated 2D affine geometric algebra.
newtype VGA2
VGA2 :: MapLS -> VGA2

-- | Tabulated 3D affine geometric algebra.
newtype VGA3
VGA3 :: MapLS -> VGA3

-- | Tabulated 2D projective geometric algebra.
newtype PGA2
PGA2 :: MapLS -> PGA2

-- | Tabulated 3D projective geometric algebra.
newtype PGA3
PGA3 :: MapLS -> PGA3

-- | Tabulated 4D projective geometric algebra.
newtype PGA4
PGA4 :: MapLS -> PGA4

-- | Template which generates aliases for given basis of Clifford algebra.
defineElements :: (Generator a ~ Int, CliffAlgebra a) => [a] -> Q [Dec]

-- | Template which generates instanses for tabulated geometric algebra.
tabulateGA :: String -> Integer -> String -> Q Decs
e0 :: (CliffAlgebra a, Generator a ~ Int) => a
e1 :: (CliffAlgebra a, Generator a ~ Int) => a
e2 :: (CliffAlgebra a, Generator a ~ Int) => a
e3 :: (CliffAlgebra a, Generator a ~ Int) => a
e4 :: (CliffAlgebra a, Generator a ~ Int) => a
e01 :: (CliffAlgebra a, Generator a ~ Int) => a
e02 :: (CliffAlgebra a, Generator a ~ Int) => a
e03 :: (CliffAlgebra a, Generator a ~ Int) => a
e04 :: (CliffAlgebra a, Generator a ~ Int) => a
e12 :: (CliffAlgebra a, Generator a ~ Int) => a
e13 :: (CliffAlgebra a, Generator a ~ Int) => a
e14 :: (CliffAlgebra a, Generator a ~ Int) => a
e23 :: (CliffAlgebra a, Generator a ~ Int) => a
e24 :: (CliffAlgebra a, Generator a ~ Int) => a
e34 :: (CliffAlgebra a, Generator a ~ Int) => a
e012 :: (CliffAlgebra a, Generator a ~ Int) => a
e013 :: (CliffAlgebra a, Generator a ~ Int) => a
e014 :: (CliffAlgebra a, Generator a ~ Int) => a
e023 :: (CliffAlgebra a, Generator a ~ Int) => a
e024 :: (CliffAlgebra a, Generator a ~ Int) => a
e034 :: (CliffAlgebra a, Generator a ~ Int) => a
e123 :: (CliffAlgebra a, Generator a ~ Int) => a
e124 :: (CliffAlgebra a, Generator a ~ Int) => a
e134 :: (CliffAlgebra a, Generator a ~ Int) => a
e234 :: (CliffAlgebra a, Generator a ~ Int) => a
e1234 :: (CliffAlgebra a, Generator a ~ Int) => a
e0234 :: (CliffAlgebra a, Generator a ~ Int) => a
e0134 :: (CliffAlgebra a, Generator a ~ Int) => a
e0124 :: (CliffAlgebra a, Generator a ~ Int) => a
e0123 :: (CliffAlgebra a, Generator a ~ Int) => a
e01234 :: (CliffAlgebra a, Generator a ~ Int) => a
instance GHC.Classes.Eq Algeometry.PGA4
instance GHC.Num.Num Algeometry.PGA4
instance GHC.Real.Fractional Algeometry.PGA4
instance GHC.Float.Floating Algeometry.PGA4
instance GHC.Show.Show Algeometry.PGA4
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.PGA4
instance Algeometry.GeometricAlgebra.GeomAlgebra Algeometry.PGA4
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.PGA4
instance Algeometry.Types.Tabulated Algeometry.PGA4
instance GHC.Classes.Eq Algeometry.PGA3
instance GHC.Num.Num Algeometry.PGA3
instance GHC.Real.Fractional Algeometry.PGA3
instance GHC.Float.Floating Algeometry.PGA3
instance GHC.Show.Show Algeometry.PGA3
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.PGA3
instance Algeometry.GeometricAlgebra.GeomAlgebra Algeometry.PGA3
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.PGA3
instance Algeometry.Types.Tabulated Algeometry.PGA3
instance GHC.Classes.Eq Algeometry.PGA2
instance GHC.Num.Num Algeometry.PGA2
instance GHC.Real.Fractional Algeometry.PGA2
instance GHC.Float.Floating Algeometry.PGA2
instance GHC.Show.Show Algeometry.PGA2
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.PGA2
instance Algeometry.GeometricAlgebra.GeomAlgebra Algeometry.PGA2
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.PGA2
instance Algeometry.Types.Tabulated Algeometry.PGA2
instance GHC.Classes.Eq Algeometry.VGA3
instance GHC.Num.Num Algeometry.VGA3
instance GHC.Real.Fractional Algeometry.VGA3
instance GHC.Float.Floating Algeometry.VGA3
instance GHC.Show.Show Algeometry.VGA3
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.VGA3
instance Algeometry.GeometricAlgebra.GeomAlgebra Algeometry.VGA3
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.VGA3
instance Algeometry.Types.Tabulated Algeometry.VGA3
instance GHC.Classes.Eq Algeometry.VGA2
instance GHC.Num.Num Algeometry.VGA2
instance GHC.Real.Fractional Algeometry.VGA2
instance GHC.Float.Floating Algeometry.VGA2
instance GHC.Show.Show Algeometry.VGA2
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.VGA2
instance Algeometry.GeometricAlgebra.GeomAlgebra Algeometry.VGA2
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.VGA2
instance Algeometry.Types.Tabulated Algeometry.VGA2


module Algeometry.SVG

-- | Represents graphic primitives
data Fig
Point :: [Attribute] -> XY -> Fig
Line :: [Attribute] -> XY -> XY -> Fig
Polygon :: [Attribute] -> [XY] -> Fig

-- | Representation of a figure with many graphic objects with attributes.
data Figure a b

-- | Returns a figure as a list of primitives.
figure :: Figure PGA2 b -> [Fig]

-- | Returns list of graphic objects with attributes.
getFigure :: Figure a b -> [([a], [Attribute])]

-- | Returns value, stored in Figure type.
getResult :: Figure a b -> b

-- | Applies transformation to objects, stored in Figure type.
mapFig :: (a1 -> a2) -> Figure a1 b -> Figure a2 b

-- | Type representing animationa frames.
data Animation a

-- | Adds multivector as graphic object to Figure.
put :: a -> Figure a a

-- | Adds multivector as graphic object with given attributes.
(@) :: a -> [Attribute] -> Figure a a
infix 1 @

-- | Appends attributes to attributed object.
(<@) :: Figure a b -> [Attribute] -> Figure a b
infix 1 <@

-- | Returns raw SVG for a figure.
svg :: Monad m => [Fig] -> HtmlT m ()

-- | Outputs figure to SVG file.
writeSVG :: FilePath -> Figure PGA2 b -> IO ()

-- | Outputs figure to PNG file.
writePNG :: String -> Figure PGA2 b -> IO ()

-- | Outputs single frame of animation, given by a frame number.
writeFrame :: Int -> FilePath -> Animation a -> IO ()

-- | Outputs animation as GIF file, using <tt>convert</tt> utility.
runAnimation :: String -> Animation a -> IO ()

-- | Creates animation from a parameterized function and given nuber of
--   frames.
animate :: Int -> (Double, Double) -> (Double -> Figure PGA2 a) -> Animation ()

-- | Creates animation with nonlinear paremeterization.
transform :: Int -> (Double -> Figure PGA2 a) -> Animation ()

-- | Creates animation from a list of figures.
animateList :: [Figure PGA2 a] -> Animation ()

-- | Returns multivector, which represents the origin.
origin :: GeomAlgebra a => a

-- | Representation of a point, given as coordinate list, as a k-vector.
point :: GeomAlgebra mv => [Double] -> mv

-- | Returns multivector, which represents a line.
line :: GeomAlgebra a => [Double] -> [Double] -> a

-- | Returns multivector, which represents a normalized line.
nline :: GeomAlgebra a => [Double] -> [Double] -> a

-- | Returns multivector, which represents a vector (line passing through
--   the origin).
vect :: GeomAlgebra a => [Double] -> a

-- | Returns multivector, which represents a normalized vector (line
--   passing through the origin).
nvect :: GeomAlgebra a => [Double] -> a

-- | Returns a graphic object, which represents a segment given by
--   coordinates.
segm :: GeomAlgebra a => [Double] -> [Double] -> Figure a [a]

-- | Returns a graphic object, which represents a polygon.
polygon :: GeomAlgebra a => [a] -> Figure a [a]

-- | Returns a graphic object, which represents a polyline.
polyline :: GeomAlgebra a => [a] -> Figure a [a]

-- | Returns a graphic object, which represents a regular polygon.
regularPoly :: GeomAlgebra a => Double -> Figure a [a]

-- | Returns a graphic object, which represents a segment? given by two
--   points.
segment :: GeomAlgebra a => a -> a -> Figure a [a]

-- | Returns multivector, which represents a plane passing through three
--   points.
plane :: GeomAlgebra a => [Double] -> [Double] -> [Double] -> a

-- | Returns graphic object, which represents a plane passing through a
--   point and a line.
plane2 :: GeomAlgebra a => a -> a -> (Double, Double) -> Figure a a

-- | Returns graphic object, which represents a plane passing through three
--   points.
plane3 :: GeomAlgebra a => a -> a -> a -> (Double, Double) -> Figure a a

-- | Returns graphic object, which represents a plane passing through a
--   point, orthogonal to a line.
orthoPlane :: GeomAlgebra a => a -> a -> (Double, Double) -> Figure a a

-- | Returns a label at given position.
label :: GeomAlgebra a => [Double] -> String -> Figure a a

-- | Returns a label with given value.
display :: (Show s, GeomAlgebra a) => [Double] -> s -> Figure a a

-- | Projects 3D points to a 2D plane, using given viewpoint.
viewPoint :: [Double] -> Figure PGA3 b -> Figure PGA2 b

-- | Adds 2D axes to a Figure
axis :: Figure PGA2 PGA2

-- | Adds 2D unit grid to a Figure
grid :: Figure PGA2 ()

-- | Adds 2D background rectangle to a Figure
background :: GeomAlgebra a => String -> Figure a [a]
instance GHC.Classes.Eq Algeometry.SVG.Fig
instance GHC.Show.Show Algeometry.SVG.Fig
instance GHC.Base.Monad (Algeometry.SVG.Figure a)
instance GHC.Base.Applicative (Algeometry.SVG.Figure a)
instance GHC.Base.Functor (Algeometry.SVG.Figure a)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (Algeometry.SVG.Figure a b)
instance GHC.Base.Monad Algeometry.SVG.Animation
instance GHC.Base.Applicative Algeometry.SVG.Animation
instance GHC.Base.Functor Algeometry.SVG.Animation
instance GHC.Show.Show a => GHC.Show.Show (Algeometry.SVG.Animation a)
instance GHC.Classes.Eq a => GHC.Base.Semigroup (Algeometry.SVG.Figure a b)
instance GHC.Classes.Eq a => GHC.Base.Monoid (Algeometry.SVG.Figure a b)
instance Lucid.Base.With (Algeometry.SVG.Figure a b)
instance GHC.Classes.Ord Algeometry.SVG.Fig
instance Lucid.Base.With [Lucid.Base.Attribute]


module Algeometry.Arbitrary

-- | Wrapper for algebra basis elements.
newtype Monom
Monom :: MV -> Monom

-- | Wrapper for 1-vector.
newtype Vector
Vector :: MV -> Vector

-- | Wrapper for 2-vector.
newtype Bivector
Bivector :: MV -> Bivector

-- | Wrapper for 3-vector.
newtype Trivector
Trivector :: MV -> Trivector

-- | Wrapper for a general multivector.
newtype Multivector
Multivector :: MV -> Multivector

-- | Wrapper for a k-vector.
newtype Homogeneous
Homogeneous :: MV -> Homogeneous
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.Arbitrary.Monom
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.Arbitrary.Monom
instance GHC.Real.Fractional Algeometry.Arbitrary.Monom
instance GHC.Num.Num Algeometry.Arbitrary.Monom
instance GHC.Classes.Eq Algeometry.Arbitrary.Monom
instance GHC.Show.Show Algeometry.Arbitrary.Monom
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.Arbitrary.Vector
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.Arbitrary.Vector
instance GHC.Real.Fractional Algeometry.Arbitrary.Vector
instance GHC.Num.Num Algeometry.Arbitrary.Vector
instance GHC.Classes.Eq Algeometry.Arbitrary.Vector
instance GHC.Show.Show Algeometry.Arbitrary.Vector
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.Arbitrary.Bivector
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.Arbitrary.Bivector
instance GHC.Real.Fractional Algeometry.Arbitrary.Bivector
instance GHC.Num.Num Algeometry.Arbitrary.Bivector
instance GHC.Classes.Eq Algeometry.Arbitrary.Bivector
instance GHC.Show.Show Algeometry.Arbitrary.Bivector
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.Arbitrary.Trivector
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.Arbitrary.Trivector
instance GHC.Real.Fractional Algeometry.Arbitrary.Trivector
instance GHC.Num.Num Algeometry.Arbitrary.Trivector
instance GHC.Classes.Eq Algeometry.Arbitrary.Trivector
instance GHC.Show.Show Algeometry.Arbitrary.Trivector
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.Arbitrary.Multivector
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.Arbitrary.Multivector
instance GHC.Real.Fractional Algeometry.Arbitrary.Multivector
instance GHC.Num.Num Algeometry.Arbitrary.Multivector
instance GHC.Classes.Eq Algeometry.Arbitrary.Multivector
instance GHC.Show.Show Algeometry.Arbitrary.Multivector
instance Algeometry.GeometricAlgebra.CliffAlgebra Algeometry.Arbitrary.Homogeneous
instance Algeometry.GeometricAlgebra.LinSpace Algeometry.Arbitrary.Homogeneous
instance GHC.Real.Fractional Algeometry.Arbitrary.Homogeneous
instance GHC.Num.Num Algeometry.Arbitrary.Homogeneous
instance GHC.Classes.Eq Algeometry.Arbitrary.Homogeneous
instance GHC.Show.Show Algeometry.Arbitrary.Homogeneous
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Homogeneous
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Multivector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Trivector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Bivector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Vector
instance Test.QuickCheck.Arbitrary.Arbitrary Algeometry.Arbitrary.Monom
